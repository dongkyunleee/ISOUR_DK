[{"D:\\KH_React\\semiTeamProject_Alone\\src\\index.js":"1","D:\\KH_React\\semiTeamProject_Alone\\src\\project\\Addr2.js":"2","D:\\KH_React\\semiTeamProject_Alone\\src\\project\\hangjungdong.js":"3","D:\\KH_React\\semiTeamProject_Alone\\src\\project\\api\\TeamAPI.js":"4","D:\\KH_React\\semiTeamProject_Alone\\src\\project\\HOME\\Home.js":"5","D:\\KH_React\\semiTeamProject_Alone\\src\\project\\Login\\Login.js":"6","D:\\KH_React\\semiTeamProject_Alone\\src\\project\\pages\\MemberInfo.js":"7","D:\\KH_React\\semiTeamProject_Alone\\src\\App.js":"8","D:\\KH_React\\semiTeamProject_Alone\\src\\project\\SignUp\\SignUp.js":"9","D:\\KH_React\\semiTeamProject_Alone\\src\\project\\pages\\Main.js":"10"},{"size":307,"mtime":1666861794155,"results":"11","hashOfConfig":"12"},{"size":1209,"mtime":1666666889910,"results":"13","hashOfConfig":"12"},{"size":249657,"mtime":1666746474202,"results":"14","hashOfConfig":"12"},{"size":1222,"mtime":1666860645374,"results":"15","hashOfConfig":"12"},{"size":974,"mtime":1666833433761,"results":"16","hashOfConfig":"12"},{"size":5334,"mtime":1666916589922,"results":"17","hashOfConfig":"12"},{"size":2522,"mtime":1666861917087,"results":"18","hashOfConfig":"12"},{"size":699,"mtime":1666862181406,"results":"19","hashOfConfig":"12"},{"size":11536,"mtime":1666861946058,"results":"20","hashOfConfig":"12"},{"size":252,"mtime":1666666889910,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"dp9us1",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"25"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"D:\\KH_React\\semiTeamProject_Alone\\src\\index.js",[],[],[],"D:\\KH_React\\semiTeamProject_Alone\\src\\project\\Addr2.js",[],[],[],"D:\\KH_React\\semiTeamProject_Alone\\src\\project\\hangjungdong.js",[],[],"D:\\KH_React\\semiTeamProject_Alone\\src\\project\\api\\TeamAPI.js",[],[],"D:\\KH_React\\semiTeamProject_Alone\\src\\project\\HOME\\Home.js",[],[],"D:\\KH_React\\semiTeamProject_Alone\\src\\project\\Login\\Login.js",[],[],"D:\\KH_React\\semiTeamProject_Alone\\src\\project\\pages\\MemberInfo.js",[],[],"D:\\KH_React\\semiTeamProject_Alone\\src\\App.js",[],[],"D:\\KH_React\\semiTeamProject_Alone\\src\\project\\SignUp\\SignUp.js",["55","56","57","58"],[],"import { useState, useCallback } from 'react';\r\nimport styled from 'styled-components';\r\nimport TeamAPI from '../api/TeamAPI';\r\n// import App2 from './Addr2';\r\nimport hangjungdong from \"../hangjungdong\";\r\n\r\n// 정규식 조건\r\nconst regexId = /^\\w{8,20}$/;\r\nconst regexPw = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,20}$/;\r\n\r\n\r\nconst Msg = styled.div`\r\n  color: red;\r\n  font-size: .8em;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  align-items: center;\r\n`;\r\n\r\nconst memberObj = {\r\n  isName: \"\",\r\n  isId: \"\",\r\n  isPassword: \"\",\r\n  isPasswordCheck: \"\",\r\n  isBirth: \"\",\r\n  isAddr: \"\"\r\n};\r\n\r\nfunction InputName() {\r\n  const [name, setName] = useState('');\r\n  const [showReqName, setShowReqName] = useState(false);\r\n  const onChangeName = e => { setName(e.target.value); };\r\n  const req_name = \"이름을 정확히 입력하세요.\"\r\n\r\n  const input_Check_Name = () => {\r\n    if(name === '') {\r\n      setShowReqName(true); // 이름을 정확히 입력하세요.\r\n    } else {\r\n      setShowReqName(false);\t// 이름을 정확히 입력하세요.\r\n    }\r\n  }\r\n\r\n  memberObj.isName = name;\r\n\r\n  return (\r\n    <div className='field-wrap'>\r\n      <div className='input-field'>\r\n        <span style={{display: 'inline-block', width: 150}}>이름</span>\r\n        <input type=\"text\" value={name} onChange={onChangeName} onBlur={input_Check_Name} required/><br />\r\n      </div>\r\n      <Msg>\r\n        {showReqName && req_name}\r\n      </Msg>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction InputId() {\r\n  const [id, setId] = useState('');\r\n  const [showReqId, setShowReqId] = useState(false);\r\n  const [showGuideId, setShowGuideId] = useState(false);\r\n  const req_id = \"아이디를 입력하세요.\"\r\n  const guide_id = \"아이디를 올바르게 입력해주세요.\"\r\n  const onChangeId = e => { setId(e.target.value); };\r\n    \r\n  const input_Check_Id = () => {\r\n    if(id === '') {\r\n      setShowReqId(true); // 아이디를 입력하세요.\r\n    } else if (!regexId.test(id)) {\r\n      setShowGuideId(true); // 아이디를 올바르게 입력해주세요.\r\n      setShowReqId(false); // 아이디를 입력하세요.\r\n    }\r\n    else {\r\n      setShowGuideId(false); // 아이디를 올바르게 입력해주세요.\r\n      setShowReqId(false); // 아이디를 입력하세요.\r\n    }\r\n  };\r\n\r\n  memberObj.isId = id;\r\n\r\n  \r\nconst onClickLogin = async() => {\r\n  console.log(\"Click 회원가입\");\r\n  // 가입 여부 우선 확인\r\n  const memberCheck = await TeamAPI.memberRegCheck(id);\r\n  // console.log(memberCheck);\r\n  console.log(\"가입가능여부 확인 : \", memberCheck.data.result);\r\n  // 가입 여부 확인 후 가입 절차 진행\r\n\r\n  // if (memberCheck.data.result === \"OK\") {\r\n  //     console.log(\"가입된 아이디가 없습니다. 다음 단계 진행 합니다.\");\r\n  //     const memberReg = await TeamAPI.memberReg(id, pwd, name, mail);\r\n  //     console.log(memberReg.data.result);\r\n  //     if(memberReg.data.result === \"OK\") {\r\n  //         window.location.replace(\"/home\");\r\n  //     } else {\r\n  //         console.log(\"회원 가입에 실패 했습니다.\");\r\n  //     }\r\n\r\n  // } else {\r\n  //     console.log(\"이미 가입된 회원 입니다.\");\r\n  // } \r\n}\r\n\r\n  return(\r\n    <div className='field-wrap'>\r\n      <div className='input-field'>\r\n        <span style={{display: 'inline-block', width: 150}}>아이디</span>\r\n        <input type=\"text\" value={id} onChange={onChangeId} onBlur={input_Check_Id}/>\r\n        <button className='IdCheckBtn' onClick={onClickLogin}>중복확인</button>\r\n      </div>\r\n      <Msg>\r\n        {showReqId && req_id}\r\n        {showGuideId && guide_id}\r\n      </Msg>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nfunction InputPassword() {\r\n  const [password, setPassword] = useState('');\r\n  const [showGuidePassword, setShowGuidePassword] = useState(false);\r\n  const [showAcceptPassword, setShowAcceptPassword] = useState(false);\r\n  const guide_password = \"영문/숫자/특수문자 2가지 이상 조합 (8~20자)(ex:Apple123*)\"\r\n  const accept_password = \"사용 가능한 비밀번호입니다.\"\r\n\r\n  let [password_check, setPassword_check] = useState('');\r\n  const [showErrorPasswordCheck, setShowErrorPasswordCheck] = useState(false);\r\n  const [showAcceptPasswordCheck, setShowAcceptPasswordCheck] = useState(false);\r\n  const error_password_check = \"비밀번호가 일치하지 않습니다.\"\r\n  const accept_password_check = \"비밀번호가 일치합니다.\"\r\n\r\n  const onChangePassword = e => {\r\n    setPassword(e.target.value);\r\n    let temp_password = e.target.value;\r\n\r\n    if(regexPw.test(temp_password)) {\r\n      setShowAcceptPassword(true); // 사용 가능한 비밀번호입니다.\r\n      setShowGuidePassword(false); // 영문/숫자/특수문자 2가지 이상 조합 (8~20자)\r\n    } else {\r\n      setShowAcceptPassword(false); // 사용 가능한 비밀번호입니다.\r\n      setShowGuidePassword(true); // 영문/숫자/특수문자 2가지 이상 조합 (8~20자)\r\n    }\r\n\r\n    if (password_check == '') console.log(password_check);\r\n    else if(password_check !== '' && (temp_password !== '' && temp_password === password_check)) {\r\n      setShowAcceptPasswordCheck(true); // 비밀번호가 일치합니다.\r\n      setShowErrorPasswordCheck(false); // 비밀번호가 일치하지 않습니다.\r\n    } else {\r\n      setShowErrorPasswordCheck(true); // 비밀번호가 일치하지 않습니다.\r\n      setShowAcceptPasswordCheck(false); // 비밀번호가 일치합니다.\r\n    }\r\n  };\r\n\r\n  const onClickPassword = () => {\r\n    if (regexPw.test(password)) {\r\n      setShowAcceptPassword(true); // 사용 가능한 비밀번호입니다.\r\n      setShowGuidePassword(false); // 영문/숫자/특수문자 2가지 이상 조합 (8~20자)\r\n    } else {\r\n      setShowGuidePassword(true); // 영문/숫자/특수문자 2가지 이상 조합 (8~20자)\r\n      setShowAcceptPassword(false); // 사용 가능한 비밀번호입니다.\r\n    }\r\n  };\r\n\r\n  const onBlurpassword = () => {\r\n    if(password === '') alert('비밀번호를 입력하세요');\r\n  };\r\n\r\n  const onChangePassword_check = e => {\r\n    setPassword_check(e.target.value);\r\n    const temp_password_check = e.target.value;\r\n\r\n    if(password == '') {\r\n      alert('비밀번호를 먼저 입력하세요.');\r\n      setPassword_check('');\r\n      showErrorPasswordCheck(false);\r\n    }\r\n\r\n    if(password !== '' && !regexPw.test(password)) {\r\n      alert('비밀번호를 확인하세요.');\r\n    } else if (password === temp_password_check) {\r\n      setShowAcceptPasswordCheck(true); // 비밀번호가 일치합니다.\r\n      setShowErrorPasswordCheck(false); // 비밀번호가 일치하지 않습니다.\r\n    } else {\r\n      setShowErrorPasswordCheck(true); // 비밀번호가 일치하지 않습니다.\r\n      setShowAcceptPasswordCheck(false); // 비밀번호가 일치합니다.\r\n    }\r\n  };\r\n\r\n  const onClickPassword_check = () => {\r\n    if(password == '') alert('비밀번호를 먼저 입력하세요.');\r\n    else if (!regexPw.test(password)) alert('비밀번호를 확인하세요.');\r\n  };\r\n\r\n  const onBlurPassword_check = () => {\r\n    if(regexPw.test(password) && password_check === '') {\r\n      alert('비밀번호 확인에 입력하세요.');\r\n      setShowErrorPasswordCheck(true); // 비밀번호가 일치하지 않습니다.\r\n    }\r\n  };\r\n\r\n  memberObj.isPassword = password;\r\n  memberObj.isPasswordCheck = password_check;\r\n\r\n  return(\r\n    <div className='field-wrap'>\r\n      <div className='input-field'>\r\n        <span style={{display: 'inline-block', width: 150}}>비밀번호</span>\r\n        <input type=\"password\" value={password} onChange={onChangePassword} onClick={onClickPassword} onBlur={onBlurpassword} />\r\n      </div>\r\n      <Msg>\r\n        {showGuidePassword && guide_password}\r\n        {showAcceptPassword && accept_password}\r\n      </Msg>\r\n\r\n        <span style={{display: 'inline-block', width: 150}}>비밀번호 확인</span>\r\n        <input type=\"password\" value={password_check} onChange={onChangePassword_check} onClick={onClickPassword_check} onBlur={onBlurPassword_check}/>\r\n      <Msg>\r\n        {showErrorPasswordCheck && error_password_check}\r\n        {showAcceptPasswordCheck && accept_password_check}\r\n      </Msg>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction InputBirth() {\r\n  const [birth, setBirth] = useState('');\r\n\r\n  const onChangeBirth = e => { setBirth(e.target.value); };\r\n\r\n  memberObj.isBirth = birth;\r\n  \r\n  return(\r\n    <div className='field-wrap'>\r\n      <div className='input-field'>\r\n        <span style={{display: 'inline-block', width: 150}}>생년월일</span>\r\n        <input type=\"date\" value={birth} onChange={onChangeBirth} />\r\n      </div>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nfunction InputSex() {\r\n  const [x, setX] = useState([]);\r\n  // const [errorRadio, setErrorRadio] = useState('');\r\n  const onChangeRadioButton = useCallback(e => {\r\n    const xCurrent = e.target.value;\r\n    setX(xCurrent);\r\n  });\r\n\r\n  memberObj.isSex = x;\r\n\r\n  return(\r\n    <div>\r\n      <label className=\"label1\">\r\n        <input\r\n\r\n          className=\"radio2\"\r\n          type=\"radio\"\r\n          value=\"1\"\r\n          checked={x === \"1\"}\r\n          onChange={onChangeRadioButton}\r\n\r\n        />\r\n        남자\r\n      </label>\r\n      <label className=\"label2\">\r\n        <input\r\n          className=\"radio3\"\r\n          type=\"radio\"\r\n          value=\"2\"\r\n          checked={x === \"2\"}\r\n          onChange={onChangeRadioButton}\r\n        />\r\n        여자\r\n      </label>\r\n    </div>\r\n  );\r\n}\r\nconst InputAddr = () => {\r\n  const [value, setValue] = useState(\"\");\r\n  const [setValue2] = useState(\"\");\r\n\r\n  //변수값 변경을 위해 타겟밸류 설정\r\n  const onChangeValue = (e) => {\r\n    setValue(e.target.value);\r\n  }\r\n  const onChangeValue2 = (e) => {\r\n    setValue2(e.target.value);\r\n  }\r\n\r\n  const { sido, sigugun } = hangjungdong;\r\n  \r\n  memberObj.isAddr = { value, setValue2 };\r\n\r\n  return (\r\n    <div>\r\n      <select onChange={onChangeValue}>\r\n        <option value=\"\">선택</option>\r\n        {/* map을 사용하여 한정동에 있는 키값을 받아옴 */}\r\n        {sido.map((el) => (\r\n          <option key={el.sido} value={el.sido}>\r\n            {el.codeNm}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <select onChange={onChangeValue2}>\r\n        <option value=\"\">선택</option>\r\n        {sigugun\r\n        // 필터함수를 사용하여 배열을 필터링하여 군/구를 불러옴\r\n          .filter((el) => el.sido === value)\r\n          .map((el) => (\r\n            <option key={el.sigugun} value={el.sigugun}>\r\n              {el.codeNm}\r\n            </option>\r\n          ))}\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nfunction onClickButton() {\r\n  if(memberObj.isName && memberObj.isId && memberObj.isPassword && memberObj.isPasswordCheck && memberObj.isBirth) {\r\n    console.log(memberObj.isName);\r\n    console.log(memberObj.isId);\r\n    console.log(memberObj.isPassword);\r\n    console.log(memberObj.isPasswordCheck);\r\n    console.log(memberObj.isBirth);\r\n    console.log(memberObj.isSex);\r\n    console.log(memberObj.isAddr);\r\n    console.log(\"가입 완!!\");\r\n    window.location.replace(\"/home\");\r\n    \r\n  } else alert('입력된 값을 확인하세요.');\r\n}\r\n\r\nfunction SignUp() {\r\n\r\n  return (\r\n    <div>\r\n      <InputName></InputName>\r\n      <InputId></InputId>\r\n      <InputPassword></InputPassword>\r\n      <InputBirth></InputBirth>\r\n      <InputSex></InputSex>\r\n      <InputAddr></InputAddr>\r\n      <button type=\"submit\" onClick={onClickButton}>회원가입</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SignUp;","D:\\KH_React\\semiTeamProject_Alone\\src\\project\\pages\\Main.js",[],[],{"ruleId":"59","severity":1,"message":"60","line":148,"column":24,"nodeType":"61","messageId":"62","endLine":148,"endColumn":26},{"ruleId":"59","severity":1,"message":"60","line":176,"column":17,"nodeType":"61","messageId":"62","endLine":176,"endColumn":19},{"ruleId":"59","severity":1,"message":"60","line":194,"column":17,"nodeType":"61","messageId":"62","endLine":194,"endColumn":19},{"ruleId":"63","severity":1,"message":"64","line":251,"column":31,"nodeType":"65","endLine":251,"endColumn":42},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","Identifier"]